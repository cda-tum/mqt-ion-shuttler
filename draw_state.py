from Cycles import GraphCreator, get_idx_from_idc

# time step: 815, gate (97,) is executed
# timestep:  816
# state_before preprocess:  {0: ((1, 80), (1, 81)), 1: ((1, 96), (1, 97)), 2: ((1, 31), (1, 32)), 3: ((1, 9), (1, 10)), 4: ((1, 57), (1, 58)), 5: ((1, 47), (1, 48)), 6: ((1, 41), (1, 42)), 7: ((1, 27), (1, 28)), 8: ((1, 70), (1, 71)), 9: ((1, 39), (1, 40)), 10: ((1, 94), (1, 95)), 11: ((1, 62), (1, 63)), 12: ((1, 40), (1, 41)), 13: ((1, 48), (1, 49)), 14: ((1, 23), (1, 24)), 15: ((1, 60), (1, 61)), 16: ((1, 89), (1, 90)), 17: ((1, 17), (1, 18)), 18: ((1, 68), (1, 69)), 19: ((1, 55), (1, 56)), 20: ((1, 51), (1, 52)), 21: ((1, 88), (1, 89)), 22: ((1, 64), (1, 65)), 23: ((1, 25), (1, 26)), 24: ((1, 74), (1, 75)), 25: ((1, 18), (1, 19)), 26: ((1, 13), (1, 14)), 27: ((1, 82), (1, 83)), 28: ((1, 36), (1, 37)), 29: ((1, 58), (1, 59)), 30: ((1, 86), (1, 87)), 31: ((1, 95), (1, 96)), 32: ((1, 32), (1, 33)), 33: ((1, 76), (1, 77)), 34: ((1, 66), (1, 67)), 35: ((1, 72), (1, 73)), 36: ((1, 37), (1, 38)), 37: ((1, 59), (1, 60)), 38: ((1, 92), (1, 93)), 39: ((1, 33), (1, 34)), 40: ((1, 49), (1, 50)), 41: ((1, 98), (1, 99)), 42: ((1, 11), (1, 12)), 43: ((1, 56), (1, 57)), 44: ((1, 6), (1, 7)), 45: ((1, 15), (1, 16)), 46: ((1, 28), (1, 29)), 47: ((1, 8), (1, 9)), 48: ((1, 43), (1, 44)), 49: ((1, 84), (1, 85)), 50: ((1, 53), (1, 54)), 51: ((1, 81), (1, 82)), 52: ((1, 12), (1, 13)), 53: ((1, 29), (1, 30)), 54: ((1, 61), (1, 62)), 55: ((1, 44), (1, 45)), 56: ((1, 50), (1, 51)), 57: ((1, 24), (1, 25)), 58: ((1, 54), (1, 55)), 59: ((1, 34), (1, 35)), 60: ((1, 78), (1, 79)), 61: ((1, 16), (1, 17)), 62: ((1, 79), (1, 80)), 63: ((1, 99), (1, 100)), 64: ((1, 42), (1, 43)), 65: ((1, 19), (1, 20)), 66: ((1, 93), (1, 94)), 67: ((1, 67), (1, 68)), 68: ((1, 21), (1, 22)), 69: ((1, 65), (1, 66)), 70: ((1, 75), (1, 76)), 71: ((1, 63), (1, 64)), 72: ((1, 69), (1, 70)), 73: ((1, 73), (1, 74)), 74: ((0, 100), (1, 100)), 75: ((1, 26), (1, 27)), 76: ((1, 52), (1, 53)), 77: ((1, 20), (1, 21)), 78: ((1, 87), (1, 88)), 79: ((1, 45), (1, 46)), 80: ((1, 90), (1, 91)), 81: ((1, 30), (1, 31)), 82: ((1, 77), (1, 78)), 83: ((2, 101.0), (1, 0)), 84: ((1, 71), (1, 72)), 85: ((1, 83), (1, 84)), 86: ((1, 22), (1, 23)), 87: ((1, 46), (1, 47)), 88: ((1, 7), (1, 8)), 89: ((1, 10), (1, 11)), 90: ((1, 85), (1, 86)), 91: ((1, 97), (1, 98)), 92: ((1, 91), (1, 92)), 93: ((1, 14), (1, 15)), 94: ((1, 35), (1, 36)), 95: ((2, 101.0), (3, 101)), 96: ((2, 101.0), (3, 101)), 97: ((2, 101.0), (3, 101)), 98: ((0, 7), (0, 8)), 99: ((0, 41), (0, 42)), 100: ((0, 66), (0, 67))}
# state_after preprocess:  {0: ((1, 80), (1, 81)), 1: ((1, 96), (1, 97)), 2: ((1, 32), (1, 33)), 3: ((1, 9), (1, 10)), 4: ((1, 57), (1, 58)), 5: ((1, 47), (1, 48)), 6: ((1, 41), (1, 42)), 7: ((1, 27), (1, 28)), 8: ((1, 70), (1, 71)), 9: ((1, 39), (1, 40)), 10: ((1, 94), (1, 95)), 11: ((1, 62), (1, 63)), 12: ((1, 40), (1, 41)), 13: ((1, 48), (1, 49)), 14: ((1, 23), (1, 24)), 15: ((1, 60), (1, 61)), 16: ((1, 89), (1, 90)), 17: ((1, 17), (1, 18)), 18: ((1, 68), (1, 69)), 19: ((1, 55), (1, 56)), 20: ((1, 51), (1, 52)), 21: ((1, 88), (1, 89)), 22: ((1, 64), (1, 65)), 23: ((1, 25), (1, 26)), 24: ((1, 74), (1, 75)), 25: ((1, 18), (1, 19)), 26: ((1, 13), (1, 14)), 27: ((1, 82), (1, 83)), 28: ((1, 37), (1, 38)), 29: ((1, 58), (1, 59)), 30: ((1, 86), (1, 87)), 31: ((1, 95), (1, 96)), 32: ((1, 33), (1, 34)), 33: ((1, 76), (1, 77)), 34: ((1, 66), (1, 67)), 35: ((1, 72), (1, 73)), 36: ((1, 38), (1, 39)), 37: ((1, 59), (1, 60)), 38: ((1, 92), (1, 93)), 39: ((1, 34), (1, 35)), 40: ((1, 49), (1, 50)), 41: ((1, 98), (1, 99)), 42: ((1, 11), (1, 12)), 43: ((1, 56), (1, 57)), 44: ((1, 6), (1, 7)), 45: ((1, 15), (1, 16)), 46: ((1, 28), (1, 29)), 47: ((1, 8), (1, 9)), 48: ((1, 43), (1, 44)), 49: ((1, 84), (1, 85)), 50: ((1, 53), (1, 54)), 51: ((1, 81), (1, 82)), 52: ((1, 12), (1, 13)), 53: ((1, 29), (1, 30)), 54: ((1, 61), (1, 62)), 55: ((1, 44), (1, 45)), 56: ((1, 50), (1, 51)), 57: ((1, 24), (1, 25)), 58: ((1, 54), (1, 55)), 59: ((1, 35), (1, 36)), 60: ((1, 78), (1, 79)), 61: ((1, 16), (1, 17)), 62: ((1, 79), (1, 80)), 63: ((1, 99), (1, 100)), 64: ((1, 42), (1, 43)), 65: ((1, 19), (1, 20)), 66: ((1, 93), (1, 94)), 67: ((1, 67), (1, 68)), 68: ((1, 21), (1, 22)), 69: ((1, 65), (1, 66)), 70: ((1, 75), (1, 76)), 71: ((1, 63), (1, 64)), 72: ((1, 69), (1, 70)), 73: ((1, 73), (1, 74)), 74: ((0, 100), (1, 100)), 75: ((1, 26), (1, 27)), 76: ((1, 52), (1, 53)), 77: ((1, 20), (1, 21)), 78: ((1, 87), (1, 88)), 79: ((1, 45), (1, 46)), 80: ((1, 90), (1, 91)), 81: ((1, 30), (1, 31)), 82: ((1, 77), (1, 78)), 83: ((2, 101.0), (1, 0)), 84: ((1, 71), (1, 72)), 85: ((1, 83), (1, 84)), 86: ((1, 22), (1, 23)), 87: ((1, 46), (1, 47)), 88: ((1, 7), (1, 8)), 89: ((1, 10), (1, 11)), 90: ((1, 85), (1, 86)), 91: ((1, 97), (1, 98)), 92: ((1, 91), (1, 92)), 93: ((1, 14), (1, 15)), 94: ((1, 36), (1, 37)), 95: ((2, 101.0), (3, 101)), 96: ((2, 101.0), (3, 101)), 97: ((2, 101.0), (3, 101)), 98: ((0, 7), (0, 8)), 99: ((0, 41), (0, 42)), 100: ((0, 66), (0, 67))}
# move_list:  [83, 96, 94, 93, 89, 47]
# edge_idc:  ((2, 101.0), (1, 0))
# next_edge:  ((1, 0), (1, 1))
# next edge filled False
# free_circle_seq_idxs:  [83, 96]
# time step: 816, gate (96, 95) is executed
# timestep:  817
state_before = {
    0: ((1, 80), (1, 81)),
    1: ((1, 96), (1, 97)),
    2: ((1, 32), (1, 33)),
    3: ((1, 9), (1, 10)),
    4: ((1, 57), (1, 58)),
    5: ((1, 47), (1, 48)),
    6: ((1, 41), (1, 42)),
    7: ((1, 27), (1, 28)),
    8: ((1, 70), (1, 71)),
    9: ((1, 39), (1, 40)),
    10: ((1, 94), (1, 95)),
    11: ((1, 62), (1, 63)),
    12: ((1, 40), (1, 41)),
    13: ((1, 48), (1, 49)),
    14: ((1, 23), (1, 24)),
    15: ((1, 60), (1, 61)),
    16: ((1, 89), (1, 90)),
    17: ((1, 17), (1, 18)),
    18: ((1, 68), (1, 69)),
    19: ((1, 55), (1, 56)),
    20: ((1, 51), (1, 52)),
    21: ((1, 88), (1, 89)),
    22: ((1, 64), (1, 65)),
    23: ((1, 25), (1, 26)),
    24: ((1, 74), (1, 75)),
    25: ((1, 18), (1, 19)),
    26: ((1, 13), (1, 14)),
    27: ((1, 82), (1, 83)),
    28: ((1, 37), (1, 38)),
    29: ((1, 58), (1, 59)),
    30: ((1, 86), (1, 87)),
    31: ((1, 95), (1, 96)),
    32: ((1, 33), (1, 34)),
    33: ((1, 76), (1, 77)),
    34: ((1, 66), (1, 67)),
    35: ((1, 72), (1, 73)),
    36: ((1, 38), (1, 39)),
    37: ((1, 59), (1, 60)),
    38: ((1, 92), (1, 93)),
    39: ((1, 34), (1, 35)),
    40: ((1, 49), (1, 50)),
    41: ((1, 98), (1, 99)),
    42: ((1, 11), (1, 12)),
    43: ((1, 56), (1, 57)),
    44: ((1, 6), (1, 7)),
    45: ((1, 15), (1, 16)),
    46: ((1, 28), (1, 29)),
    47: ((1, 8), (1, 9)),
    48: ((1, 43), (1, 44)),
    49: ((1, 84), (1, 85)),
    50: ((1, 53), (1, 54)),
    51: ((1, 81), (1, 82)),
    52: ((1, 12), (1, 13)),
    53: ((1, 29), (1, 30)),
    54: ((1, 61), (1, 62)),
    55: ((1, 44), (1, 45)),
    56: ((1, 50), (1, 51)),
    57: ((1, 24), (1, 25)),
    58: ((1, 54), (1, 55)),
    59: ((1, 35), (1, 36)),
    60: ((1, 78), (1, 79)),
    61: ((1, 16), (1, 17)),
    62: ((1, 79), (1, 80)),
    63: ((1, 99), (1, 100)),
    64: ((1, 42), (1, 43)),
    65: ((1, 19), (1, 20)),
    66: ((1, 93), (1, 94)),
    67: ((1, 67), (1, 68)),
    68: ((1, 21), (1, 22)),
    69: ((1, 65), (1, 66)),
    70: ((1, 75), (1, 76)),
    71: ((1, 63), (1, 64)),
    72: ((1, 69), (1, 70)),
    73: ((1, 73), (1, 74)),
    74: ((0, 100), (1, 100)),
    75: ((1, 26), (1, 27)),
    76: ((1, 52), (1, 53)),
    77: ((1, 20), (1, 21)),
    78: ((1, 87), (1, 88)),
    79: ((1, 45), (1, 46)),
    80: ((1, 90), (1, 91)),
    81: ((1, 30), (1, 31)),
    82: ((1, 77), (1, 78)),
    83: ((1, 0), (1, 1)),
    84: ((1, 71), (1, 72)),
    85: ((1, 83), (1, 84)),
    86: ((1, 22), (1, 23)),
    87: ((1, 46), (1, 47)),
    88: ((1, 7), (1, 8)),
    89: ((1, 10), (1, 11)),
    90: ((1, 85), (1, 86)),
    91: ((1, 97), (1, 98)),
    92: ((1, 91), (1, 92)),
    93: ((1, 14), (1, 15)),
    94: ((1, 36), (1, 37)),
    95: ((2, 101.0), (3, 101)),
    96: ((2, 101.0), (3, 101)),
    97: ((2, 101.0), (3, 101)),
    98: ((0, 7), (0, 8)),
    99: ((0, 41), (0, 42)),
    100: ((0, 66), (0, 67)),
}
state_after = {
    0: ((1, 80), (1, 81)),
    1: ((1, 96), (1, 97)),
    2: ((1, 32), (1, 33)),
    3: ((1, 9), (1, 10)),
    4: ((1, 57), (1, 58)),
    5: ((1, 47), (1, 48)),
    6: ((1, 41), (1, 42)),
    7: ((1, 28), (1, 29)),
    8: ((1, 70), (1, 71)),
    9: ((1, 39), (1, 40)),
    10: ((1, 94), (1, 95)),
    11: ((1, 62), (1, 63)),
    12: ((1, 40), (1, 41)),
    13: ((1, 48), (1, 49)),
    14: ((1, 24), (1, 25)),
    15: ((1, 60), (1, 61)),
    16: ((1, 89), (1, 90)),
    17: ((1, 18), (1, 19)),
    18: ((1, 68), (1, 69)),
    19: ((1, 55), (1, 56)),
    20: ((1, 51), (1, 52)),
    21: ((1, 88), (1, 89)),
    22: ((1, 64), (1, 65)),
    23: ((1, 26), (1, 27)),
    24: ((1, 74), (1, 75)),
    25: ((1, 19), (1, 20)),
    26: ((1, 13), (1, 14)),
    27: ((1, 82), (1, 83)),
    28: ((1, 37), (1, 38)),
    29: ((1, 58), (1, 59)),
    30: ((1, 86), (1, 87)),
    31: ((1, 95), (1, 96)),
    32: ((1, 33), (1, 34)),
    33: ((1, 76), (1, 77)),
    34: ((1, 66), (1, 67)),
    35: ((1, 72), (1, 73)),
    36: ((1, 38), (1, 39)),
    37: ((1, 59), (1, 60)),
    38: ((1, 92), (1, 93)),
    39: ((1, 34), (1, 35)),
    40: ((1, 49), (1, 50)),
    41: ((1, 98), (1, 99)),
    42: ((1, 11), (1, 12)),
    43: ((1, 56), (1, 57)),
    44: ((1, 6), (1, 7)),
    45: ((1, 16), (1, 17)),
    46: ((1, 29), (1, 30)),
    47: ((1, 8), (1, 9)),
    48: ((1, 43), (1, 44)),
    49: ((1, 84), (1, 85)),
    50: ((1, 53), (1, 54)),
    51: ((1, 81), (1, 82)),
    52: ((1, 12), (1, 13)),
    53: ((1, 30), (1, 31)),
    54: ((1, 61), (1, 62)),
    55: ((1, 44), (1, 45)),
    56: ((1, 50), (1, 51)),
    57: ((1, 25), (1, 26)),
    58: ((1, 54), (1, 55)),
    59: ((1, 35), (1, 36)),
    60: ((1, 78), (1, 79)),
    61: ((1, 17), (1, 18)),
    62: ((1, 79), (1, 80)),
    63: ((1, 99), (1, 100)),
    64: ((1, 42), (1, 43)),
    65: ((1, 20), (1, 21)),
    66: ((1, 93), (1, 94)),
    67: ((1, 67), (1, 68)),
    68: ((1, 22), (1, 23)),
    69: ((1, 65), (1, 66)),
    70: ((1, 75), (1, 76)),
    71: ((1, 63), (1, 64)),
    72: ((1, 69), (1, 70)),
    73: ((1, 73), (1, 74)),
    74: ((0, 100), (1, 100)),
    75: ((1, 27), (1, 28)),
    76: ((1, 52), (1, 53)),
    77: ((1, 21), (1, 22)),
    78: ((1, 87), (1, 88)),
    79: ((1, 45), (1, 46)),
    80: ((1, 90), (1, 91)),
    81: ((1, 31), (1, 32)),
    82: ((1, 77), (1, 78)),
    83: ((1, 5), (1, 6)),
    84: ((1, 71), (1, 72)),
    85: ((1, 83), (1, 84)),
    86: ((1, 23), (1, 24)),
    87: ((1, 46), (1, 47)),
    88: ((1, 7), (1, 8)),
    89: ((1, 10), (1, 11)),
    90: ((1, 85), (1, 86)),
    91: ((1, 97), (1, 98)),
    92: ((1, 91), (1, 92)),
    93: ((1, 14), (1, 15)),
    94: ((1, 36), (1, 37)),
    95: ((2, 101.0), (3, 101)),
    96: ((2, 101.0), (3, 101)),
    97: ((2, 101.0), (3, 101)),
    98: ((0, 7), (0, 8)),
    99: ((0, 41), (0, 42)),
    100: ((0, 66), (0, 67)),
}

# move_list:  [96, 94, 93, 89, 47]
# edge_idc:  ((1, 14), (1, 15))
# next_edge:  ((1, 15), (1, 16))
# next edge filled False
# free_circle_seq_idxs:  [96, 94, 93]
# time step: 817, gate (96, 95) is executed
# timestep:  818
# Traceback (most recent call last):
#   File "/Users/danielschonberger/Desktop/ion-shuttler-option/mqt-ion-shuttler/run_heuristic.py", line 67, in <module>
#     timestep = run_simulation(memorygrid, max_timesteps, seq, flat_seq, dag_dep, next_node_initial, max_length=10, show_plot=False)
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#   File "/Users/danielschonberger/Desktop/ion-shuttler-option/mqt-ion-shuttler/scheduling.py", line 475, in run_simulation
#     check_duplicates(state_idxs, memorygrid, memorygrid.graph_creator.parking_edge, memorygrid.max_num_parking)
#   File "/Users/danielschonberger/Desktop/ion-shuttler-option/mqt-ion-shuttler/scheduling.py", line 453, in check_duplicates
#     raise AssertionError(message)
# AssertionError: More than one chain in edge ((1, 15), (1, 16))!
# (tket) danielschonberger@Daniels-MBP mqt-ion-shuttler %


graph = GraphCreator(2, 2, 1, 100)
state_before = [get_idx_from_idc(graph.idc_dict, idx) for idx in state_before.values()]
state_after = [get_idx_from_idc(graph.idc_dict, idx) for idx in state_after.values()]
graph.plot_state(
    ion_moves=state_after,
    labels=[
        "before",
        None,
    ],
    show_plot=True,
)
